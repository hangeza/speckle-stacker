# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: gcc
            name: ninja
            #- os: windows-latest
            #  c_compiler: cl
            #  cpp-compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          #- os: windows-latest
          #  c_compiler: gcc
          #- os: windows-latest
          #  c_compiler: cl

    steps:
    - uses: actions/checkout@v4
    #- name: Set build dir (Windows)
    - name: Set build dir
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      #if: runner.os == 'Windows'
      #id: win-build
      id: build
      shell: bash
      run: |
        #echo "build-output-dir=${{ github.workspace }}\build" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        
        #- name: Add msbuild to PATH
        #  if: ${{ matrix.os == 'windows-latest' }}
        #  uses: microsoft/setup-msbuild@v1.0.2
    
    # Setup C++ build toolchain + dependencies
    - name: Install build system (Windows)
      if: runner.os == 'Windows' && matrix.name
      run: |
        # Install required compilers using Chocolatey
        choco install ${{ matrix.name }} libopencv-dev
        #choco install libopencv-dev
        echo "PATH=$PATH;C:\OpenCV4.10.0\x64\mingw\bin" >> $GITHUB_ENV
   
    - name: Install FFTW3 (Windows)
      if: runner.os == 'Windows' && matrix.name
      id: fftw
      run: |
        # Download and extract FFTW3 for Windows (64-bit) from GitHub
        echo "Downloading FFTW3 for Windows..."
        Invoke-WebRequest -Uri "https://fftw.org/pub/fftw/fftw-3.3.5-dll64.zip" -OutFile "$env:Temp\fftw3.zip"
        # Check if the download was successful
        if (-Not (Test-Path "$env:Temp\fftw3.zip")) {
          Write-Error "FFTW3 download failed!"
          exit 1
        }
        # Extract the zip file
        Expand-Archive -Path "$env:Temp\fftw3.zip" -DestinationPath "$env:Temp\fftw3"
        # Set up environment variables for FFTW3
        # Set the paths for FFTW3 as outputs
        echo "fftw3_include=$env:Temp\fftw3" >> $env:GITHUB_OUTPUT
        echo "fftw3_libdir=$env:Temp\fftw3" >> $env:GITHUB_OUTPUT
        echo "fftw3_lib=$env:Temp\fftw3\libfftw3-3.dll" >> $env:GITHUB_OUTPUT
        # Display the environment variables
        echo "FFTW3_INCLUDE_DIR = $env:Temp\fftw3"
        echo "FFTW3_LIBRARY_DIR = $env:Temp\fftw3"
        echo "FFTW3_LIBRARIES = $env:Temp\fftw3\libfftw3-3.dll"
        Copy-Item -Path "$env:Temp\fftw3\libfftw3-3.dll" -Destination "C:\Windows\System32" -Force
        echo "FFTW3 installed and environment variables set."
    - name: Install build system (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt update && sudo apt full-upgrade
        sudo apt-get install ${{ matrix.compiler }} libopencv-dev libfftw3-dev

    - name: Configure CMake (Windows)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      env:
        FFTW3_INCLUDE_DIR: "${{ steps.fftw.outputs.fftw3_include }}"
        FFTW3_LIBRARY_DIR: "${{ steps.fftw.outputs.fftw3_libdir }}"
        FFTW3_LIBRARIES: "${{ steps.fftw.outputs.fftw3_lib }}"
      if: runner.os == 'Windows' && matrix.name
      run: |
        #echo "FFTW3_INCLUDE_DIR = $env:FFTW3_INCLUDE_DIR"
        #echo "FFTW3_LIBRARY_DIR = $env:FFTW3_LIBRARY_DIR"
        #echo "FFTW3_LIBRARIES = $env:FFTW3_LIBRARIES"
        cmake -B ${{ steps.build.outputs.build-output-dir }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }} -G "Ninja"

    - name: Configure CMake (Linux)
      if: runner.os == 'Linux' || (runner.os == 'Windows' && !matrix.name)
      run: >
        cmake -B ${{ steps.build.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.build.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Add build directory to PATH
      if: runner.os == 'Windows' && matrix.name
      shell: bash
      run: |
        #echo "PATH=$(pwd)/build:$PATH" >> $GITHUB_ENV
        #$dllDirectory = "${{ steps.build.outputs.build-output-dir }}"
        #[System.Environment]::SetEnvironmentVariable("Path", $env:Path + ";$dllDirectory", [System.EnvironmentVariableTarget]::Process)
        #echo "PATH=$PATH;${{ steps.build.outputs.build-output-dir }};${{ steps.build.outputs.build-output-dir }}\bin;${{ steps.build.outputs.build-output-dir }}\output\lib" >> $GITHUB_ENV
        #echo "$env:GITHUB_PATH;${{ steps.build.outputs.build-output-dir }};${{ steps.build.outputs.build-output-dir }}\bin;${{ steps.build.outputs.build-output-dir }}\output\lib" >> $env:GITHUB_PATH
        echo "${{ steps.build.outputs.build-output-dir }};${{ steps.build.outputs.build-output-dir }}\bin;${{ steps.build.outputs.build-output-dir }}\output\lib" >> $GITHUB_PATH

    - name: Test (Windows)
      if: runner.os == 'Windows' && matrix.name
      working-directory: ${{ steps.build.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        copy ${{ steps.build.outputs.build-output-dir }}\libsmip.dll ${{ steps.build.outputs.build-output-dir }}\bin
        copy C:\Users\RUNNER~1\AppData\Local\Temp\fftw3\libfftw3-3.dll ${{ steps.build.outputs.build-output-dir }}\bin
        copy C:\OpenCV4.10.0\x64\mingw\bin\*.dll ${{ steps.build.outputs.build-output-dir }}\bin
        $env:PATH = "${{ steps.build.outputs.build-output-dir }};${{ steps.build.outputs.build-output-dir }}\bin;${{ steps.build.outputs.build-output-dir }}\output\lib;C:\Users\RUNNER~1\AppData\Local\Temp\fftw3;C:\OpenCV4.10.0\x64\mingw\bin;$env:PATH"
        #echo "${{ steps.build.outputs.build-output-dir }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        ctest --rerun-failed --output-on-failure --build-config ${{ matrix.build_type }}
      shell: pwsh
   
    - name: Test (Linux)
      if: runner.os == 'Linux'
      working-directory: ${{ steps.build.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ctest --rerun-failed --output-on-failure --build-config ${{ matrix.build_type }}
