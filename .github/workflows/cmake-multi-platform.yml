# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: gcc
            name: mingw
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang
            name: mingw
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: msvc
          - os: windows-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        
        # Setup C++ build toolchain + dependencies
    - name: Install dependencies (Windows)
      if: runner.os == 'Windows' && matrix.name
      run: |
        # Install required compilers using Chocolatey
        choco install ${{ matrix.name }} libopencv-dev
        #--version ${{ matrix.version }}

        # Download and extract FFTW3 for Windows (64-bit) from GitHub
        echo "Downloading FFTW3 for Windows..."
        Invoke-WebRequest -Uri "https://fftw.org/pub/fftw/fftw-3.3.5-dll64.zip" -OutFile "$env:Temp\fftw3.zip"
    
        # Check if the download was successful
        if (-Not (Test-Path "$env:Temp\fftw3.zip")) {
        Write-Error "FFTW3 download failed!"
        exit 1
        }

        # Extract the zip file
        Expand-Archive -Path "$env:Temp\fftw3.zip" -DestinationPath "$env:Temp\fftw3"

        # Set up environment variables for FFTW3
        setx FFTW3_INCLUDE_DIR "$env:Temp\fftw3\include"
        setx FFTW3_LIBRARY_DIR "$env:Temp\fftw3\lib"
        setx FFTW3_LIBRARIES "$env:Temp\fftw3\lib\libfftw3-3.dll"
        echo "FFTW3_INCLUDE_DIR = " $env:FFTW3_INCLUDE_DIR
        echo "FFTW3_LIBRARY_DIR = $env:FFTW3_LIBRARY_DIR"
        echo "FFTW3_LIBRARIES = " %FFTW3_LIBRARIES%
        echo "FFTW3 installed and environment variables set."
        
        # Install OpenCV for Windows
        #echo "Downloading OpenCV for Windows..."
        #Invoke-WebRequest -Uri "https://github.com/opencv/opencv/releases/download/4.5.5/opencv-4.5.5-vc14_vc15.exe" -#OutFile "$env:Temp\opencv_installer.exe"
    
        # Run the OpenCV installer (silent install)
        #Start-Process "$env:Temp\opencv_installer.exe" -ArgumentList "/S" -NoNewWindow -Wait
    
        # Set up environment variables for OpenCV
        #setx OPENCV_DIR "C:\opencv"
        #setx OPENCV_INCLUDE_DIR "C:\opencv\build\include"
        #setx OPENCV_LIB_DIR "C:\opencv\build\x64\vc15\lib"
        #setx OPENCV_BIN_DIR "C:\opencv\build\x64\vc15\bin"
        #setx OPENCV_LIBS "C:\opencv\build\x64\vc15\lib\opencv_world455.lib"
    
        #echo "OpenCV installed and environment variables set."

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get install ${{ matrix.compiler }} libopencv-dev libfftw3-dev

    - name: Configure CMake (Windows)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: runner.os == 'Windows' && matrix.name
      run: >
        echo "FFTW3_INCLUDE_DIR = " $env:FFTW3_INCLUDE_DIR
        echo "FFTW3_LIBRARY_DIR = $env:FFTW3_LIBRARY_DIR"
        echo "FFTW3_LIBRARIES = " %FFTW3_LIBRARIES%
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -G "MinGW Makefiles"

    - name: Configure CMake (Linux)
      if: runner.os == 'Linux'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
